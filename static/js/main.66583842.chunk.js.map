{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","auth/authReducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/Page404/Page404.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authApi","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","email","status","isInitialized","setEmailAC","setAppIsInitializedAC","initializeAppTC","response","resultCode","isAxiosError","removeTaskAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","catch","console","warn","rootReducer","combineReducers","state","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyDown","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","appStatus","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","useEffect","setTimeout","items","setTasksAC","removeTodolist","style","paddingTop","Button","TodolistsList","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","password","rememberMe","onSubmit","values","log","resetForm","validate","errors","test","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","Page404","textAlign","App","userEmail","AppBar","display","alignItems","position","Toolbar","Typography","marginRight","LinearProgress","Container","fixed","path","element","top","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66583842.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7660ed7e-f677-4d6b-a08d-94c2433a5da0'\r\n    }\r\n})\r\n\r\n// api\r\n\r\nexport const authApi = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: string }>>>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number,email: string,login: string }>>('/auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, setEmailAC} from \"../app/app-reducer\";\r\nimport {authApi} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport axios from \"axios\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {\r\n                ...state, isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => async (dispatch: Dispatch<AuthActionsType>) => {\r\n    try {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const response = await authApi.login(data)\r\n        console.log(response)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(response.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error)) {\r\n            handleServerNetworkError(error, dispatch)\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC('idle'))\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => async (dispatch: Dispatch<AuthActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const response = await authApi.logout()\r\n    try {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setEmailAC(null))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(response.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        if (axios.isAxiosError(error))\r\n            handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type AuthActionsType =\r\n    ReturnType<typeof setIsLoggedInAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof setEmailAC>\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {setIsLoggedInAC} from \"../auth/authReducer\";\r\nimport {authApi} from \"../api/todolists-api\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\nimport axios from \"axios\";\r\n\r\nconst initialState: InitialStateType = {\r\n    email : null as null | string,\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized : action.value}\r\n        case \"APP/SET-EMAIL\":\r\n            return {\r\n                ...state,\r\n                email: action.email\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n// Actions\r\nexport const setEmailAC = (email: string | null) =>\r\n    ({type: 'APP/SET-EMAIL', email} as const)\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppIsInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIZED', value} as const)\r\n\r\n// Thunk\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const response = await authApi.me()\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setEmailAC(response.data.data.email))\r\n            dispatch(setIsLoggedInAC(true));\r\n            dispatch(setAppIsInitializedAC(true))\r\n        } else {\r\n            // handleServerAppError(response.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        if (axios.isAxiosError(e)) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }\r\n    finally {\r\n        dispatch(setAppIsInitializedAC(true))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n    email : string | null\r\n}\r\nexport type AppActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppIsInitializedAC>\r\n    | ReturnType<typeof setEmailAC>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType, AppThunk} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) : AppThunk => async (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        await todolistsAPI.deleteTask(todolistId, taskId)\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n    } catch (error) {\r\n        // handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<TasksActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<TodolistsActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type TodolistsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<TodolistsActionsType | SetAppStatusActionType>\r\n","import {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware, {ThunkAction, ThunkDispatch} from 'redux-thunk'\r\nimport {AppActionsType, appReducer} from './app-reducer'\r\nimport {AuthActionsType, authReducer} from \"../auth/authReducer\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType = TodolistsActionsType | TasksActionsType | AuthActionsType | AppActionsType\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>\r\nexport type AppDispatch = ThunkDispatch<AppRootStateType, unknown, AppActionType>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyDown={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {useAppSelector} from \"../../../../app/store\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const appStatus = useAppSelector(state => state.app.status)\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} disabled={appStatus === 'loading'} >\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {useAppSelector} from \"../../../app/store\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const appStatus = useAppSelector(state => state.app.status)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(()=> dispatch(fetchTasksTC(props.todolist.id)),0)\r\n    }, [])\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={appStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={appStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {initializeAppTC} from \"../../app/app-reducer\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isLoggedIn) return <Navigate to={'/login'}/>\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n\r\n    return (\r\n        // @ts-ignore\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"../../auth/authReducer\";\r\nimport {useAppDispatch, useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n        validate: (values: FormikErrorType) => {\r\n\r\n            const errors: FormikErrorType = {}\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Field email is required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required'\r\n            } else if (values.password?.length < 2) {\r\n                errors.password = 'Password length must be more than 2 symbols'\r\n            }\r\n\r\n            return errors\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) return <Navigate to={'/'}/>\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}/>\r\n                        {formik.errors.email && formik.touched.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   {...formik.getFieldProps('password')}\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"/>\r\n                        {formik.errors.password && formik.touched.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          {...formik.getFieldProps('rememberMe')}\r\n                                          control={\r\n                                              <Checkbox checked={formik.values.rememberMe}/>}/>\r\n                        <Button type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}","import React from 'react';\r\n\r\nexport const Page404 = () => {\r\n    return (\r\n       <h1 style= { {textAlign : \"center\"} } >\r\n           Page is not found. Please check url address\r\n       </h1>\r\n    );\r\n};\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch} from 'react-redux'\r\nimport {useAppSelector} from './store'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Page404} from \"../features/Page404/Page404\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logoutTC} from \"../auth/authReducer\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const status = useAppSelector((state) => state.app.status)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const userEmail = useAppSelector(state => state.app.email)\r\n    console.log('userEmail : ' ,userEmail)\r\n    console.log('status : ', status)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized ) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            {userEmail && <AppBar style={{display: 'flex',alignItems : 'flex-start'}} position=\"static\">\r\n                <Toolbar>\r\n                    <Typography style={{marginRight : '10px', color : 'gold'}} variant=\"h6\">\r\n                        {userEmail}\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={handleLogout} color=\"inherit\">Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path={'/login'} element={<Login/>}/>\r\n                    <Route path={'/404'} element={<Page404/>}/>\r\n                    <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}